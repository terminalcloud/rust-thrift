///////////////////////////////////////////////////////////////
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING
///////////////////////////////////////////////////////////////

#![allow(unused_mut, dead_code, non_snake_case)]
#[allow(unused_imports)]
use std::collections::{HashMap, HashSet};

use shared::*;

enom! {
  name = Operation,
  values = [
    ADD = 1,
    SUBTRACT = 2,
    MULTIPLY = 3,
    DIVIDE = 4,
  ],
  default = ADD
}

pub type MyInteger = i32;

strukt! {
  name = Work,
  fields = {
    num1: i32 => 1,
    num2: i32 => 2,
    op: Operation => 3,
    comment: Option<String> => 4,
  }
}

service! {
  trait_name = Calculator,
  processor_name = CalculatorProcessor,
  client_name = CalculatorClient,
  service_methods = [
    CalculatorPingArgs -> CalculatorPingResult = a.ping(
    ) -> (),
    CalculatorAddArgs -> CalculatorAddResult = a.add(
      num1: i32 => 1,
      num2: i32 => 2,
    ) -> i32,
    CalculatorCalculateArgs -> CalculatorCalculateResult = a.calculate(
      logid: i32 => 1,
      w: Work => 2,
    ) -> i32,
    CalculatorZipArgs -> CalculatorZipResult = a.zip(
    ) -> (),
  ],
  parent_methods = [
    SharedServiceGetStructArgs -> SharedServiceGetStructResult = b.getStruct(
      key: i32 => 1,
    ) -> SharedStruct,
  ],
  bounds = [A: Calculator, B: SharedService, ],
  fields = [a: A, b: B, ]
}

